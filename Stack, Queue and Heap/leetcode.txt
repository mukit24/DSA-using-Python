### Stack

Problem: 20
* make dictionary for corresponding parenthesis. loop through input and check if closing paren present in the key. If present then check is its opening paren present in the stack top(stack[-1] == paren[item]) ,if true then pop else return False. Append item if opening paren is found.
* At last check if stack is empty or not.
* Additional improvement: 1st check if input contains odd number of elements. For odd number it is always False.

problem: 155
* Using Two Stack: One stack for normal stack operation, Other one for min value. If current value is less than or equal to the min_stack top then add it in the min_stack. When poping check if the poped value is equal to the min_stack top, then pop from min_stack also.
* Using One Stack: Store value in pair in stack. Like (value, min_value).

problem: 2390
* Using Stack (O(n)): Just simulate the problem. Adding values on stack. When star found, pop value from stack. Then return the stack.
* In Place (const space): Identify the index where we need to put characters without *. Loop through and increase the index when valid char found and place that character in that index. When * found, decrement the index character (bcz we need to remove previous char of *).

problem: 735
* Using Stack: Add in stack if asteriod is positive/ top of stack is negative / stack is empty. If asteriods is negative then handle the collision (if negative survives then handle it untill it destroyed).

problem: 394
* Using Stack: 1st idea come to mind is, this can be divided into subproblems. So recursive solution wil be worked. Wait, we can solve that by stack also because recursion uses stack. Append to the stack until closing bracket found. When closing braket found, start poping from stack untill opening found. So we got the string. Now start poping for finding the the number(k). When append found append that in stack (substr * k).
* Popping and pushing operation can be reduced by extra condition checking and extra spcae. Implement this.

problem: 150
* Using Stack: Simulate the process. Appending on stack (just operand). When a operator found just pop last two operand. Do the neccessary operation then append the result on stack.

-> Monotonic Stack [Stack maintain increasing (for finding next lowest) or decresing order (for finding next greatest)]

Problem: 739
* Brute Force [O(n^2) time]: For each day, iterate through the subsequent days to find a warmer temperature.
* Monotonic Stack [O(n) time & spcae]: When we find solution? If we get an warmer day then previous day. So we need all previous days at a certain day. Traverse and append day in stack (but append the index bcz days can be duplicate). When we find a warmer day than the top of stack it means thats a answer. So pop it and calculate the answer using prev_index - current_index. Wait need to continue this process for all prev days because warmer day may hold true for them also (because stack is in decreasing order).
* Think of O(1) space solution.

problem: 901
* Brute Force [O(n^2)]: For each incoming price, traverse backward to count the span by comparing the current price with all previous prices.
* Monotonic Stack [O(n)]: If we know the previous price span then we can optimize the brute force. Use stack to store (price, span) pair. By default span is 1. If top of stack is less than or equal to current price then calculate the span based on top of the stack and pop ( we dont need this anymore bcz we calculate its span in current price). Excute this until current value is less than top of the stack.

problem: 496
* Monotonic Stack: Use decreasing monotonic stack. Use hashMap for checking valid value and identifying index.

Problem: 853
* what is the time of each car to reach target? for position 10, speed 2 and target 12 , it is 1 hr. If another car time is 1 hr or less to reach target and it is behind(position is less) that car, its mean that two car are fleet(in the same position or can be overtaken each other).
* So we need to sort on the basis of position. Let's sort in decresing order.
* So, test_case1 will be [(10, 2), (8, 4), (5,1)...(position, speed)] and time can be calculated as [1,1,7,3,...]
* let loop through it and check present time is >= next time(1st point logic). If not then ans += 1.
* Bonus: if ask the position of one car in each flet then a stack can be handful  in the place of ans counter. Though present problem can be solve by stack by appending instead of ans += 1 and then count the len of stack.

problem: 84
* Brute Force: For each bar in the histogram, consider it as the smallest height in a rectangle and expand it to the left and right to calculate the area.
* Monotonic Stack: See code.
* DP - think of it.

### Queue

problem: 1472
* Using List: Use a list to simulate the history. When visit truncate the list.
* Using Doubly Linked List.

problem: 1700
* Using Queue: Simulate the process. Check rotation for identifying unable eater.

problem: 933
* Using Queue: Enque every ping. Pop from queue when top of queue is less than t-3000. Then length of the queue will give the answer.

### heap
problem: 621
* we need to handle the most frequent task properly for minimizing the time. 
* use maxheap to store the most frequent tasks.
* but we need to consider the cooling time n. Suppose 'A' is current task then its frequency became 2. But we can't put 'A' in the next slot. We need to wait current_time+n time. Store this info in an queue.
* Process tasks by decrementing their counts and reinserting them after the cooldown.
