problem: 217
* Brute Force [O(n^2) time and O(1) space]: Compare every pair of elements.
* Sorting [O(nlogn) time]: Sort the array, and then check consecutive elements for equality. Space complexity will be O(1) if using heap sort or inplace quick sort.
* HashSet [O(n)]: As you iterate through the array, add each element to a set. If an element is already in the set, return true.

problem: 242
* Sorting [O(nlogn) time and O(n) space]: If anagaram then sorting of both string will be same.
* HashMap [O(n) time & O(1) space bcz fixed 26 char]: HashMap to count character in 1st string. Then loop through 2nd string and check if not exist or its frequency is 0 then return False. Otherwise just decrement the count. If anagram then all values of hashMap will be zero. Alternating approach will be using a character array or built in Counter class.

problem: 1
* Brute Force: Check all pairs of numbers to see if they sum to the target.
* HashMap [O(n)]: Iterate and add in hashMap (key: num, value: index). And check (target - num) present in the hashMap. If found then return their indices.

problem: 49
* Brute Force: For each string, compare it with all others to check if they are anagrams. Group them manually.
* Use sorted string as Key [O(n*klogk) time & O(n*k) space]: Anagrams, when sorted, produce the same string. Use this sorted string as a key in a hash map to group anagrams as value in the hash map.
* Use frequency array as key [O(n*k)]: Use frequency array as key then proceed like previous. Find out why we use tuple as a key but not list.

problem: 347
* Hash map and sorting [O(nlogn) time and O(n) space]: Use hash map to count the freqeuncies. Sort the hash map by frequency. Return 1st k element.
* Heap solution can be found on Heap Section.
* Bucket Sort Solution can be found on Sorting section.

problem: 271
* Concatenate strings with a unique delimiter that doesn't appear in the original strings. During decoding, split the encoded string using the same delimiter. Problem is if delimeter alreadcy present in the string.
* For each string, store its length followed by a special character (e.g., #) and the string itself. During decoding, parse the length prefix to extract each string. This approach handles any characters, including delimiters, and works efficiently.

problem: 36
* Use hash set for rows, cols and sub boxes(index will be (i//3,j//3) or ((i//3)*3 + (j//3))).Traverse the board, and for each digit, check and add to the corresponding row, column, and sub-box.If a duplicate is found in any row, column, or sub-box, the board is invalid.
* Can be solved using one hash set. Include everything in hashset. Ex: seen = {'(num) in row (0)', '(num) in col (0)', '(num) in box(0)',.....}

problem: 128
* Using Sorting [O(nlogn) time - not prefered]: In sorted a list, traverse and check current = current -1 and count.
* Using HashSet [O(n)]: Convert nums to set. Traverse and check for is it the starting point of a sequence(if element-1 not exist then it is starting point). If starting point found then apply while loop for element+1 and count. Max count is the answer.


## Using Prefix Sum Algorithm ##

problem: 303
* Brute Force: For each query, iterate through the range [ùëñ,ùëó] and sum the elements. Problem is, for multiple queries it is inefficient because each needs O(n).
* Prefix Sum [O(1) time for each query]: Precompute the prefix sum for each position. For range[i,j], ans will be prefixSum[j] - prefixSum[i-1] (handle i overflow).

problem: 304
* Brute Force: 
    for r1 to r2:
        for c1 to c2:
            then just calculate the sum.
* Prefix Sum as 303: Calculate the prefix sums as rectangle. Means bottom right cell will be the sum of any rectangle. So, ans will be bottomRight - top - left + topLeft (because in top and left it is minimized twice so adjust it by adding topLeft). For (r1,c1) = (0,0) it will be out of index. So increase the size of the matrix by adding top and left offset(as 0 all).

problem: 238
* Brute Force[O(n^2)]
* Using Division [O(n) time and O(1) space]: Get the total product value. Then just loop through a divide total product value by current value. Remember to handle case where zero is present.
* Using Prefix & Suffix [O(n) time and O(1) space]:Compute the product of all elements to the left(prefix) and right(suffix) of each index. Store them in two array. Finally, combine the results of the two arrays to get the desired product array.
* Optimized Prefix & Suffix [Space O(n)]: We can optimize the space complexity by avoiding the extra space used for prefix and suffix arrays.
Use the result array itself. In 1st loop get the prefix in result array. In 2nd loop mutliply existing number(prefix) with suffix.

problem: 724
* Brute Force[O(n^2)]: For each index i, calculate the sum of elements to the left and the sum of elements to the right.
* Prefix Sum[O(n)]: Calculate total sum. Then loop through the array and calculate right sum(=total-left-current) & left sum. 

problem: 560
* Brute Force[O(n^2)]: Iterate through all possible subarrays, calculate their sums, and check if they equal k.

problem: 1732
* Brute Force[O(n) time & O(1) space]: Compute the altitude at each point using a running sum of the gain array and track the maximum value. Efficient.
* Prefix Sum [Space O(n)]: Use when you need all altitude.

