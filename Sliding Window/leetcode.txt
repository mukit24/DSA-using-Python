problem: 643
* Sliding Window [O(n) time]: Similar to Maximum sum subarray of size ‘K’ problem except when return just canculate max_sum/k. We can use slightly different code, Calculate the 1st k elements sum and assign it to max_sum and cur_sum. Now loop through from k to end. Calculate cur_sum by adding current and removing the element(i-k). Check for max sum and at last return max_sum / k.

problem: 2461
* Sliding Window + HashSet [O(n) time & O(k) space]: think of Maximum Sum Subarray of Size k problem. Only difference is that window must contain unique elements. Maintain a hash set for current window. In each iteration, 1st check for duplicates. Remove value from hashSet and current_sum and increase left pointer untill all are distict in the current window. Then calculate current sum and add current num in hashSet. When window size is equal to k, calculate the max sum and do other neccessay operation(remove from current  sum and hashSet, increase left pointer). 

problem: 1456
* Same as Maximum Sum Subarray of Size k. Just count the current_vowel and max_vowel instead.

problem: 1343
* Same as Maximum Sum Subarray of Size k. Just need the average that are greater than threshold. Wait, we can eliminate the division operation in each iteration. Just calculate the required sum at first. Required Sum = k * threshold.

problem: 219
* Sliding Window + HashSet [O(n) time & O(k) space]: Same elements should be in the window of size k. So, use a hashset for window. Loop and check if current is already exist on window set then return True. When window size exceed k then remove left element from set and increment the left pointer.
* HashMap [O(n) time & space]: This approach need less operations though time complexity is same as previous. Loop and add each number with their position. When a number already exist in the hash map then check i - hashMap[nums[i]] <= k. If that the case then return true.

problem: 121
* Brute Force[O(n^2)]: Check every pair of buy and sell,then calculate profit.
* One pass [O(n) time]: Identify the minimum buy price. When current value is greater then buy price then calculate profit and max profit.

problem: 209
* Brute Force [O(n^2)]: Traverse all subarrays and calculate their sums. Track the minimum length of subarrays whose sum is greater than or equal to the target.
* Sliding Window [O(n) time & O(1) space]: Use sliding window like Maximum Sum Subarray of Size k problem. Except calculate the minimum length (R - L + 1) and Left Pointer handling is different. Window shrinking will happen until the base condition satisfies.
* Prefix Sum and Sliding Window [O(n) space] (not recomended): Calculate the prefix sum as array. Loop through prefix sum array. Shrink the window when prefix[R] - prefix[L] >= target.

problem: 3
* Sliding Window [O(n) time]: Use hashset - if current number is already present in the hashset window then shrink the window until duplicate removes. Similar approach using Hashmap - insert element in hashmap with their position. When current element already present in the hashmap and in our window then adjust left pointer to map[s[R]] value + 1 and adjust hashMap value.

problem: 424
* Sliding Window and HashMap [O(n)]: Concept is - increasing window size (with maintaining hashMap for frequncy count) and check if current_window_size - max_freq_in_current_window > k. If that happen then shirnk the window untill that condition satisfies.

problem: 567
* remember anagram? permutation is just like anagrams. so we can bruthforce in sliding window. use sliding window in s2 with window size of len(s1). then check each character of s1 and window. Its O(m*n). We can do another way by sorting the window and s1 then check. So its O(mlogm * n). Now Let's move to O(n) solution.
*  Character in the both string is limited to a-z. So we can use a fixed size(26) array or a hashmap to count each frequency. For array we need ascii value, for hashmap we can simply count freq in key-val pair. When both s1 freq and window freq is equal then we found the permutations.
* A variation can be applied bby using only one fixed array or hashmap. We need to adjust the s1 freq in every window. when the s1 freq is all zero then its true.
* One important note, using fixed size array is more performance friendly then hashmap. while both are O(1) in lookup(for array its index lookup) but the hashmap constant factors are overhead because its dynammic nature, hashing, mermory allocation etc. For example arr[1] is efficent more than hashmaplook because hashmap applies hash function in lookups. 

problem: 76
* Sliding Window + HashMap (O(n * m) time): Use two hashMap. One for t and other for window (add only when char present in tMap bcz other character doesnot need to compare). In each window, compare two hashMap (check every element and see if tMap[k] >= window[k]). If true then check for minimum length and shrinking window based on true condition.
* Optimization of previous (O(n), exactly O(n+m) time): We have some repetitive checking when comparing two hashMaps. We can replace this by constant time comparision. Use two variable 'need' (which is equal to the len of t) and 'have' (for window). Increase have variable when window[k] == tMap[k]. When have == need then check for ans and shrinking window. When shrinking also decrement have variable if window[k] < tMap[k].

problem: 239
* Using Heap (O(nlogn) time): Maintain a max heap of size k (with index). For every window push and pop (logk time) from max heap. Check for maximum in heap in constant time.
* Using Deque (O(n) time): Use deque for storing useful index. When insert check top element value is less than current, it means previous values is not useful (we just need the current value because it is maximum) so pop them. When dq[0] is out of window then popleft. When window size reaches add dq[0] to the result array.